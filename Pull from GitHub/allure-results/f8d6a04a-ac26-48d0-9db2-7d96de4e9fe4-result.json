{"name": "test_verify_that_user_able_to_add_multiple_product_with_customization_and_coke_convergence", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'D:\\\\Pull from GitHub\\\\util\\\\constants.json'", "trace": "self = <FixtureRequest for <Function test_verify_that_user_able_to_add_multiple_product_with_customization_and_coke_convergence>>, argname = 'setup_platform'\n\n    def getfixturevalue(self, argname: str) -> Any:\n        \"\"\"Dynamically run a named fixture function.\n    \n        Declaring fixtures via function argument is recommended where possible.\n        But if you can only decide whether to use another fixture at test\n        setup time, you may use this function to retrieve it inside a fixture\n        or test function body.\n    \n        This method can be used during the test setup phase or the test run\n        phase, but during the test teardown phase a fixture's value may not\n        be available.\n    \n        :param argname:\n            The fixture name.\n        :raises pytest.FixtureLookupError:\n            If the given fixture could not be found.\n        \"\"\"\n        # Note that in addition to the use case described in the docstring,\n        # getfixturevalue() is also called by pytest itself during item and fixture\n        # setup to evaluate the fixtures that are requested statically\n        # (using function parameters, autouse, etc).\n    \n>       fixturedef = self._get_active_fixturedef(argname)\n\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:532: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:617: in _get_active_fixturedef\n    fixturedef.execute(request=subrequest)\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1071: in execute\n    raise exc.with_traceback(exc_tb)\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1140: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:891: in call_fixture_func\n    fixture_result = next(generator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nenv = 'fire_tv', request = <SubRequest 'setup_platform' for <Function test_verify_login_with_valid_mobile_number_and_otp[https://www.uat.mcdapp.co]>>\n\n    @pytest.fixture(scope=\"module\", autouse=False)\n    def setup_platform(env, request):\n        driver = None\n        \"\"\"\n            Fixture for setting up the testing environment.\n        \"\"\"\n        project_root = os.getcwd()\n        constants_path = os.path.join(project_root, 'util', 'constants.json')\n>       with open(constants_path) as constant_file:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'D:\\\\Pull from GitHub\\\\util\\\\constants.json'\n\nmcd_test_automation\\conftest.py:163: FileNotFoundError"}, "description": "D:\\Pull from GitHub\\mcd_test_automation\\tests\\features\\Mcd_Sanity_Validations.feature: Verify that user able to add multiple product with customization and coke convergence", "attachments": [{"name": "log", "source": "3c471e12-e7dc-49f2-a3a2-f5ae4327a225-attachment.txt", "type": "text/plain"}], "start": 1746444376497, "stop": 1746444376501, "uuid": "3e509d93-f87a-4cd3-b999-0af265e6f0c1", "historyId": "ea4d73358dc746bd425f3d78233ed9d4", "testCaseId": "ea4d73358dc746bd425f3d78233ed9d4", "fullName": "tests.step_defs.test_mcd_sanity_validations#test_verify_that_user_able_to_add_multiple_product_with_customization_and_coke_convergence", "labels": [{"name": "tag", "value": "TC_07"}, {"name": "tag", "value": "TC_08"}, {"name": "tag", "value": "TC_13"}, {"name": "tag", "value": "automated"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "TC_09"}, {"name": "tag", "value": "McDAppValidations"}, {"name": "tag", "value": "TC_14"}, {"name": "tag", "value": "TC_12"}, {"name": "tag", "value": "TC_10"}, {"name": "tag", "value": "TC_11"}, {"name": "parentSuite", "value": "tests.step_defs"}, {"name": "suite", "value": "test_mcd_sanity_validations"}, {"name": "host", "value": "DESKTOP-MGRHPRG"}, {"name": "thread", "value": "3192-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.step_defs.test_mcd_sanity_validations"}]}