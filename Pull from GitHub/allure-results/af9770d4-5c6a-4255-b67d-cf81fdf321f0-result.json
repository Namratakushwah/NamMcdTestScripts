{"name": "test_verify_login_with_valid_mobile_number_and_otp[https://www.uat.mcdapp.co]", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'D:\\\\Pull from GitHub\\\\util\\\\constants.json'", "trace": "self = <FixtureRequest for <Function test_verify_login_with_valid_mobile_number_and_otp[https://www.uat.mcdapp.co]>>, argname = 'setup_platform'\n\n    def getfixturevalue(self, argname: str) -> Any:\n        \"\"\"Dynamically run a named fixture function.\n    \n        Declaring fixtures via function argument is recommended where possible.\n        But if you can only decide whether to use another fixture at test\n        setup time, you may use this function to retrieve it inside a fixture\n        or test function body.\n    \n        This method can be used during the test setup phase or the test run\n        phase, but during the test teardown phase a fixture's value may not\n        be available.\n    \n        :param argname:\n            The fixture name.\n        :raises pytest.FixtureLookupError:\n            If the given fixture could not be found.\n        \"\"\"\n        # Note that in addition to the use case described in the docstring,\n        # getfixturevalue() is also called by pytest itself during item and fixture\n        # setup to evaluate the fixtures that are requested statically\n        # (using function parameters, autouse, etc).\n    \n>       fixturedef = self._get_active_fixturedef(argname)\n\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:532: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:617: in _get_active_fixturedef\n    fixturedef.execute(request=subrequest)\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1091: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\setuponly.py:36: in pytest_fixture_setup\n    return (yield)\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1140: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\DELL-L7480\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:891: in call_fixture_func\n    fixture_result = next(generator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nenv = 'fire_tv', request = <SubRequest 'setup_platform' for <Function test_verify_login_with_valid_mobile_number_and_otp[https://www.uat.mcdapp.co]>>\n\n    @pytest.fixture(scope=\"module\", autouse=False)\n    def setup_platform(env, request):\n        driver = None\n        \"\"\"\n            Fixture for setting up the testing environment.\n        \"\"\"\n        project_root = os.getcwd()\n        constants_path = os.path.join(project_root, 'util', 'constants.json')\n>       with open(constants_path) as constant_file:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'D:\\\\Pull from GitHub\\\\util\\\\constants.json'\n\nmcd_test_automation\\conftest.py:163: FileNotFoundError"}, "description": "D:\\Pull from GitHub\\mcd_test_automation\\tests\\features\\Mcd_Sanity_Validations.feature: Verify login with valid Mobile Number and OTP", "attachments": [{"name": "log", "source": "9b65ee67-a0ae-44fe-81af-a4d1304b9a83-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "_pytest_bdd_example", "value": "{'appURL': 'https://www.uat.mcdapp.co'}"}], "start": 1746444375827, "stop": 1746444375858, "uuid": "9fd3bcb5-a054-488e-af24-49a33e2c9f99", "historyId": "0a8af4608ca7a5f9681d1d99cc1b3ac3", "testCaseId": "3457dffe5d66050b6515fdc91b9ade3e", "fullName": "tests.step_defs.test_mcd_sanity_validations#test_verify_login_with_valid_mobile_number_and_otp", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "McDAppValidations"}, {"name": "tag", "value": "TC_01"}, {"name": "tag", "value": "TC_02"}, {"name": "parentSuite", "value": "tests.step_defs"}, {"name": "suite", "value": "test_mcd_sanity_validations"}, {"name": "host", "value": "DESKTOP-MGRHPRG"}, {"name": "thread", "value": "3192-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.step_defs.test_mcd_sanity_validations"}]}